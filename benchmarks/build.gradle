apply from: "$rootDir/gradle/javaModule.gradle"

// generate uberjar with all benchmarks
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'

archivesBaseName = 'crate-benchmarks'
mainClassName = 'org.openjdk.jmh.Main'

test.enabled = false

dependencies {
    compile project(':sql')
    compile project(path: ':sql', configuration: 'testOutput')
    compile project(':integration-testing')

    compile 'org.openjdk.jmh:jmh-core:1.19'
    compile 'org.openjdk.jmh:jmh-generator-annprocess:1.19'
    compile "org.hamcrest:hamcrest-all:${versions.hamcrest}"
    compile "org.elasticsearch:securemock:${versions.securemock}"

    // Dependencies of JMH
    runtime 'net.sf.jopt-simple:jopt-simple:4.6'
    runtime 'org.apache.commons:commons-math3:3.2'
}

//compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked"
// enable the JMH's BenchmarkProcessor to generate the final benchmark classes
// needs to be added separately otherwise Gradle will quote it and javac will fail
//compileJava.options.compilerArgs.addAll(["-processor", "org.openjdk.jmh.generators.BenchmarkProcessor"])

shadowJar {
    classifier = 'benchmarks'
}


// jmhJar {
//     append 'META-INF/services/org.apache.lucene.codecs.DocValuesFormat'
//     append 'META-INF/services/org.apache.lucene.codecs.Codec'
//     append 'META-INF/services/org.apache.lucene.codecs.PostingsFormat'
// }
task jmhJar(
    dependsOn: shadowJar,
    description: 'Generates an uberjar with the microbenchmarks and all dependencies',
    group: 'Benchmark'
)

//task jmh(
//    dependsOn: runShadow,
//    description: 'Runs all microbenchmarks',
//    group: 'Benchmark'
//)
